[tool.poetry]
name = "competitive-verifier"
version = "3.2.0"
description = "Verifier for libraries of competitive programming"

license = "MIT"
authors = ["kzrnm <gengesa@gmail.com>"]

repository = "https://github.com/competitive-verifier/competitive-verifier"
homepage = "https://github.com/competitive-verifier/competitive-verifier"
readme = "README.md"

packages = [
    { include = "competitive_verifier", from = "src" },
    { include = "competitive_verifier_resources", from = "src" },
]
include = [{ path = "tests", format = "sdist" }]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
competitive-verifier = "competitive_verifier.app:main"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
colorlog = "^6.7.0"
online-judge-tools = "=11.5.1"
online-judge-api-client = "=10.10.1"
colorama = "^0.4.6"
pydantic = "^2.0.3"
pyyaml = "^6.0"
importlab = "^0.8"
charset-normalizer = "^3.3.2"
tomli = { version = "^2.0.1", python = "<3.11" }
poethepoet = "^0.24.2"


[tool.poetry.group.test.dependencies]
pytest = "^7.2.0"
pytest-mock = "^3.12.0"
pytest-subtests = "^0.11.0"
pytest-order = "^1.1.0"

[tool.poetry.group.dev.dependencies]
flake8 = { version = "^6.1.0", extras = ["lint"] }
black = { version = "^23.7.0", extras = ["lint"] }
isort = { version = "^5.10.1", extras = ["lint"] }
pyright = { version = "^1.1.277", extras = ["lint"] }
pyproject-flake8 = { version = "^6.1.0", extras = ["lint"] }
poethepoet = "^0.24.1"

[tool.poe.tasks]
flake8 = "pflake8 src tests"
isort = "isort src tests"
black = "black src tests"
pyright = "pyright src tests"
format = ["isort", "black", "pyright", "flake8"]
"lint:isort" = "isort --check-only --diff src tests"
"lint:black" = "black --diff --check src tests"
lint = ["lint:isort", "lint:black", "pyright", "flake8"]
test = "pytest"
test-quick = "pytest -m 'not integration'"
test-integration = "pytest -m integration"
test-each-language-integration = "pytest -m each_language_integration"
test-use-prev-dest = "poe test --use-prev-dest"

"jekyll:serve" = { cmd = "bundle exec jekyll serve --incremental --livereload", cwd = ".competitive-verifier/_jekyll" }
"jekyll:init" = { shell = "bundle config set --local path '.vendor/bundle'; bundle install", cwd = ".competitive-verifier/_jekyll" }

[tool.poe.tasks."schema-verify_files"]
script = "competitive_verifier.script_tools.schema:show_verify_json_schema"
[tool.poe.tasks."schema-verify_result"]
script = "competitive_verifier.script_tools.schema:show_result_json_schema"
[tool.poe.tasks."schema-config_yml"]
script = "competitive_verifier.script_tools.docs:show_default_config_yml"

[tool.poe.tasks."dev-oj-resolve"]
shell = "competitive-verifier oj-resolve --include examples --config examples/config.toml > .competitive-verifier/tmp/all-verify_files.json"

[tool.poe.tasks."dev-verify"]
shell = "competitive-verifier verify --output .competitive-verifier/tmp/all-result.json"
env = { COMPETITIVE_VERIFY_FILES_PATH = ".competitive-verifier/tmp/all-verify_files.json" }

[tool.poe.tasks."dev-docs"]
shell = "competitive-verifier docs .competitive-verifier/tmp/all-result.json --include examples/"
env = { COMPETITIVE_VERIFY_FILES_PATH = ".competitive-verifier/tmp/all-verify_files.json" }

[tool.poe.tasks."dev-external-verify"]
shell = "competitive-verifier verify --output .competitive-verifier/tmp/result.json"
env = { COMPETITIVE_VERIFY_FILES_PATH = "examples/external/verify_files.json" }

[tool.poe.tasks."dev-external-docs"]
shell = "competitive-verifier docs .competitive-verifier/tmp/result.json --include examples/"
env = { COMPETITIVE_VERIFY_FILES_PATH = "examples/external/verify_files.json" }


[tool.poe.tasks.serve]
env = { _COMPETITIVE_SERVE_DIR = ".competitive-verifier/_jekyll" }
[[tool.poe.tasks.serve.sequence]]
default = "pass"
[tool.poe.tasks.serve.sequence.control]
expr = "os.path.isdir(os.getenv('_COMPETITIVE_SERVE_DIR'))"
imports = ["os"]
[[tool.poe.tasks.serve.sequence.switch]]
case = "False"
ref = "dev-docs"
[[tool.poe.tasks.serve.sequence]]
ref = "_serve"

[tool.poe.tasks.serve-handmade]
env = { _COMPETITIVE_SERVE_DIR = "integration_test_data/dst_dir/documents/handmade/test_hand_docs" }
[[tool.poe.tasks.serve-handmade.sequence]]
default = "pass"
[tool.poe.tasks.serve-handmade.sequence.control]
expr = "os.path.isdir(os.getenv('_COMPETITIVE_SERVE_DIR'))"
imports = ["os"]
[[tool.poe.tasks.serve-handmade.sequence.switch]]
case = "False"
cmd = "pytest --use-prev-dest tests/integration/test_command_docs.py::test_hand_docs"
[[tool.poe.tasks.serve-handmade.sequence]]
ref = "_serve"


[tool.poe.tasks._serve]
[[tool.poe.tasks._serve.sequence]]
default = "pass"
[tool.poe.tasks._serve.sequence.control]
expr = "os.path.isdir(os.getenv('_COMPETITIVE_SERVE_DIR')+'/.vendor')"
imports = ["os"]
[[tool.poe.tasks._serve.sequence.switch]]
case = "False"
ref = "jekyll:init"
cwd = "${_COMPETITIVE_SERVE_DIR}"

[[tool.poe.tasks._serve.sequence]]
ref = "jekyll:serve"
cwd = "${_COMPETITIVE_SERVE_DIR}"

[tool.ruff]
target-version = "py39"


exclude = [
    "examples",
    "integration_test_data",
    "src/competitive_verifier_resources/jekyll",
    "tests/integration/testdata",
]
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = ["E4", "E7", "E9", "PL", "E", "W", "F", "I"]
ignore = ["PLR0911", "PLR0912", "PLR0913", "PLR0915", "E501"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["PLR2004"]
"src/competitive_verifier/oj/verify/languages/*.py" = ["PLW2901", "PLR2004"]

[tool.ruff.lint.isort]
known-first-party = ["competitive_verifier"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.pytest.ini_options]
testpaths = "tests/"
markers = ["integration", "each_language_integration"]
